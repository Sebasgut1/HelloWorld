name: Windows

on:
  push:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows",
            os: windows-latest,
            artifact: "windows",
            build_type: "Release",
            cc: "clang",
            cxx: 'clang++',
            archiver: "zip",
            generators: "Ninja"
          }
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel
            binutils
            python
            git
            make
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-lapack
            mingw-w64-x86_64-msmpi
            mingw-w64-x86_64-libxml2
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-qt5
            mingw-w64-x86_64-doxygen
            mingw-w64-x86_64-graphviz
            mingw-w64-x86_64-rapidjson
            mingw-w64-x86_64-msmpi
            mingw-w64-x86_64-petsc
            mingw-w64-x86_64-petsc-build
            mingw-w64-x86_64-cgns
            mingw-w64-x86_64-parmetis
            mingw-w64-x86_64-vtk

      - uses: actions/checkout@v3

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}

      - name: Install choco on windows
        if: startsWith(matrix.config.name, 'Windows')
        shell: cmd
        run: |
          gcc -v
          curl -L -O https://download.microsoft.com/download/a/5/2/a5207ca5-1203-491a-8fb8-906fd68ae623/msmpisetup.exe
          curl -L -O https://download.microsoft.com/download/a/5/2/a5207ca5-1203-491a-8fb8-906fd68ae623/msmpisdk.msi
          msmpisdk.msi /quiet
          .\msmpisetup.exe -unattend -force
          
      - name: Print Microsoft MPI Env
        if: startsWith(matrix.config.name, 'Windows')
        run: |
          printenv | grep "WIN\|MSMPI"
          cygpath -ms 'C:\Program Files\Microsoft MPI\Bin\'
          cygpath -u 'C:/PROGRA~1/MICROS~2/Bin/'
          export PATH=$PATH:/c/PROGRA~1/MICROS~2/Bin/

      - name: Build Bitpit
        if: startsWith(matrix.config.name, 'Windows')
        run: |
          git clone --depth 1 --single-branch --branch mimic-devel https://github.com/optimad/bitpit.git
          cd bitpit
          mkdir build
          cd build
          cmake -G "MinGW Makefiles" -DBITPIT_ENABLE_MPI=ON -DBITPIT_VERBOSE_MAKE=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../bitpit_install -DPETSC_DIR=/d/a/_temp/msys64/mingw64/src/petsc-3.17.3 -DPETSC_ARCH=dmo -DPETSC_CURRENT=ON ../
          echo "MAKEEEEEEEEE"
          cmake --build . --config Release
          echo "MAKEEEEEEEEE INSTALL"
          cmake --install . --config Release
          dir ..

      - name: Build Mimic
        if: startsWith(matrix.config.name, 'Windows')
        run: |
          git clone --depth 1 --single-branch --branch general.msvc.compiling https://github.com/optimad/mimic.git
          cd mimic
          mkdir build
          cd build
          export OMPI_MCA_rmaps_base_oversubscribe=1
          cmake -G "MinGW Makefiles" -DBUILD_XMLTUI=ON -DBUILD_TESTPLUGIN=ON -DBUILD_EXAMPLES=ON -DBUILD_MIMIC_API_MODE=ON -DBUILD_SHARED_LIBS=ON -DENABLE_MPI=ON -DCMAKE_BUILD_TYPE=Release -DMIMIC_MODULE_IOCGNS=ON -DMIMIC_MODULE_IOCUSTOMDATA=ON -DMIMIC_MODULE_IOOFOAM=OFF -DMIMIC_MODULE_NURBS=ON -DMIMIC_MODULE_OBJWAVEFRONT=ON -DMIMIC_MODULE_WRAPPERBLOCKS=ON -DPETSC_DIR=/d/a/_temp/msys64/mingw64/src/petsc-3.17.3 -DPETSC_ARCH=dmo -DPETSC_CURRENT=ON -DCMAKE_INSTALL_PREFIX:PATH=../instdir ../
          make -j8
          ctest --rerun-failed --output-on-failure
          cmake --install . --config Release
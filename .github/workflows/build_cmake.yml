name: CMake Build Matrix

on:
  push:
  pull_request:
  release:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          -{
            name: "Ubuntu_Latest_GCC_Release",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc_Release",
            build_type: "Release",
            cc: "clang",
            cxx: 'clang++',
            archiver: "7z a",
            generators: "Ninja"
            }
          -{
            name: "SUSE Enterprise Linux SP15",
            os: self-hosted,
            artifact: "suse-release",
            build_type: "Release",
            cc: "clang"
            cxx: "clang++",
            archiver: ".gz",
            generator: "Ninja"
            }

    steps:
      - uses: actions/checkout@v2

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}

      - name: Install dependencies on Suse
        if: startsWith(matrix.config.name, 'SUSE')
        shell: bash
        run: |
          zypper install update
          zypper install ninja
          zypper install git
          zypper install cmake
          zypper install libboost-all-dev
          zypper install patchelf
        
          ninja --version
          cmake --version
          gcc --version

      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC')
        shell: bash
        run: |
          sudo apt-get update
          sudo apt install build-essential
          sudo apt-get install -y ninja-build
          sudo apt-get install git
          sudo apt-get install cmake
          sudo apt-get install libboost-all-dev
          sudo apt-get install patchelf
          sudo apt update && sudo apt upgrade -y
        
          sudo chmod -R ugo+rwx /usr/local
          
          ninja --version
          cmake --version
          gcc --version

      - name: Build
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC_Release')
        shell: bash
        run: |

          mkdir build
          cd build
          cmake ../
          make
          cpack
          tar -xvzf toyapp.tar.gz
          patchelf --add-needed libmpi.so.12 toyapp/bin/main
          patchelf --add-needed libmetis.so toyapp/bin/main

      - name: Pack
        shell: bash
        run: |
          cd build
          tar -czvf ../${{ matrix.config.artifact }}.tar.gz toyapp

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ./${{ matrix.config.artifact }}.tar.gz
          name: ${{ matrix.config.artifact }}.tar.gz

      - name: Upload release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.config.artifact }}
          asset_name: ${{ matrix.config.artifact }}.zip
          asset_content_type: application/zip
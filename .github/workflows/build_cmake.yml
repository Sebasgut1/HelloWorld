name: CMake Build Matrix

on:
  push:
  pull_request:
  release:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu_Latest_GCC_Release",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc_Release.7z",
            build_type: "Release",
            cc: "clang",
            cxx: 'clang++',
            archiver: "7z a",
            generators: "Ninja"
          }

    steps:
      - uses: actions/checkout@v2

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
          export FOAM_SRC=/usr/lib/openfoam/openfoam2106/etc/bashrc
          echo hello $FOAM_SRC
      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC')
        run: |
          sudo apt update
          sudo apt install build-essential
          sudo apt-get install -y ninja-build
          sudo apt-get install git
          sudo apt-get install cmake
          sudo apt-get install gfortran
          sudo apt-get install libblas-dev
          sudo apt-get install liblapack-dev
          sudo apt-get install liblapacke-dev
          sudo apt-get install openmpi-bin
          sudo apt-get install libboost-all-dev
          sudo apt-get install libopenmpi-dev
          sudo apt-get install petsc-dev
          sudo apt-get install libxml2-dev
          sudo apt-get install vim
          sudo apt-get install mpi
          sudo apt-get install libmetis-dev
          sudo apt-get install libparmetis-dev
          sudo apt-get install libcgal-dev
          sudo apt-get install curl
          curl -s https://dl.openfoam.com/add-debian-repo.sh | sudo bash
          sudo apt-get install openfoam2106-default
          sudo chmod ugo+rwx /usr/lib/openfoam/openfoam2106/etc/bashrc
          sudo sed -i '187iecho "this is the variable WM_PROJECT_DIR : $WM_PROJECT_DIR"' /usr/lib/openfoam/openfoam2106/etc/bashrc
          sudo sed -i '202iecho "cgal in SETUP"' /usr/lib/openfoam/openfoam2106/etc/config.sh/setup
          sudo sed -i '204iecho "WM_PROJECT_DIR is $WM_PROJECT_DIR in SETUP"' /usr/lib/openfoam/openfoam2106/etc/config.sh/setup
          sudo su -
          echo "source /usr/lib/openfoam/openfoam2106/etc/bashrc" >> $HOME/.bashrc
          echo "echo 'IM IN  BASHRC'" >> $HOME/.bashrc
          cat ~/.bashrc
          source ~/.bashrc
          echo GONOOOOO
          echo $FOAM_SRC
          echo $FOAM_API
          echo $WM_PROJECT_DIR
          echo FINGONOO
          
          sudo chmod -R ugo+rwx /usr/local
          
          ninja --version
          cmake --version
          gcc --version
      - name: Install dependencies on ubuntu without MPI
        if: startsWith(matrix.config.name, 'Without_MPI_Ubuntu_Latest_GCC')
        run: |
          mkdir lib
          cd lib
          wget https://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-3.17.2.tar.gz
          tar -xzvf petsc-3.17.2.tar.gz
          cd petsc-3.17.2
          ./configure --with-cc=gcc --with-cxx=g++ --with-fc=gfortran --with-debugging=0 COPTFLAGS='-O3 -march=native -mtune=native' CXXOPTFLAGS='-O3 -march=native -mtune=native' FOPTFLAGS='-O3 -march=native -mtune=native' --with-mpi=0
          make
          
          sudo apt update
          sudo apt install build-essential
          sudo apt-get install -y ninja-build
          sudo apt-get install git
          sudo apt-get install cmake
          sudo apt-get install gfortran
          sudo apt-get install libblas-dev
          sudo apt-get install liblapack-dev
          sudo apt-get install liblapacke-dev
          sudo apt-get install openmpi-bin
          sudo apt-get install libboost-all-dev
          sudo apt-get install libopenmpi-dev
          sudo apt-get install libxml2-dev
          sudo apt-get install vim
          
          sudo chmod -R ugo+rwx /usr/local
          
          ninja --version
          cmake --version
          gcc --version

      - name: Configure with MPI
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC')
        shell: bash
        run: |
          cd fds
          echo $FOAM_SRC
          echo foam.thing: ${{ env.FOAM_SRC }}
          git clone https://github.com/optimad/bitpit.git --branch master --single-branch
          cd bitpit
          mkdir build
          cd build
          cmake -DBITPIT_ENABLE_MPI=ON -DBITPIT_VERBOSE_MAKE=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DPETSC_DIR=/usr/lib/petsc -DPETSC_CURRENT=ON ../
          make -j8
          make install

      - name: Configure without MPI
        if: startsWith(matrix.config.name, 'Without_MPI_Ubuntu_Latest_GCC')
        shell: bash
        run: |
          git clone https://github.com/optimad/bitpit.git
          cd bitpit
          mkdir build
          cd build
          cmake -DBITPIT_ENABLE_MPI=OFF -DBITPIT_VERBOSE_MAKE=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DPETSC_ARCH=arch-linux-c-opt -DPETSC_DIR=/home/runner/work/HelloWorld/HelloWorld/lib/petsc-3.17.2 -DPETSC_CURRENT=ON ../
          make -j8
          make install

      - name: Build with MPI Release
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC_Release')
        shell: bash
        run: |
          echo GONOOOOO
          echo foam.thing: ${{ env.FOAM_SRC }}
          mkdir instdir
          mkdir build
          cd build
          cmake -DBUILD_MIMIC_API_MODE=ON -DENABLE_MPI=ON -DCMAKE_BUILD_TYPE=Release -DPETSC_DIR=/usr/lib/petsc -DPETSC_CURRENT=ON -DCMAKE_INSTALL_PREFIX:PATH=instdir ../
          make && ctest
      - name: Build with MPI Debug
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC_Debug')
        shell: bash
        run: |
          mkdir instdir
          mkdir build
          cd build
          cmake -DBUILD_MIMIC_API_MODE=ON -DENABLE_MPI=ON -DCMAKE_BUILD_TYPE=Debug -DPETSC_DIR=/usr/lib/petsc -DPETSC_CURRENT=ON -DCMAKE_INSTALL_PREFIX:PATH=instdir ../
          make && ctest

      - name: Build without MPI Release
        if: startsWith(matrix.config.name, 'Without_MPI_Ubuntu_Latest_GCC_Release')
        shell: bash
        run: |
          mkdir instdir
          mkdir build
          cd build
          cmake -DBUILD_MIMIC_API_MODE=ON -DENABLE_MPI=OFF -DCMAKE_BUILD_TYPE=Release -DPETSC_ARCH=arch-linux-c-opt -DPETSC_DIR=/home/runner/work/HelloWorld/HelloWorld/lib/petsc-3.17.2 -DPETSC_CURRENT=ON -DCMAKE_INSTALL_PREFIX:PATH=instdir ../
          make && ctest
      - name: Build without MPI Debug
        if: startsWith(matrix.config.name, 'Without_MPI_Ubuntu_Latest_GCC_Debug')
        shell: bash
        run: |
          mkdir instdir
          mkdir build
          cd build
          cmake -DBUILD_MIMIC_API_MODE=ON -DENABLE_MPI=OFF -DCMAKE_BUILD_TYPE=Debug -DPETSC_ARCH=arch-linux-c-opt -DPETSC_DIR=/home/runner/work/HelloWorld/HelloWorld/lib/petsc-3.17.2 -DPETSC_CURRENT=ON -DCMAKE_INSTALL_PREFIX:PATH=instdir ../
          make && ctest

      - name: Install Strip
        shell: bash
        run: |
          cd build
          cmake --install . --strip

      - name: Pack
        shell: bash
        working-directory: instdir
        run: |
          ls -laR
          ${{ matrix.config.archiver }} ../${{ matrix.config.artifact }} .
      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ./${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}

      - name: Upload release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.config.artifact }}
          asset_name: ${{ matrix.config.artifact }}.zip
          asset_content_type: application/zip
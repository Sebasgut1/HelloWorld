name: CMake Build Matrix

on:
  push:
  pull_request:
  release:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu_Latest_GCC_Release",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc_Release",
            build_type: "Release",
            cc: "clang",
            cxx: 'clang++',
            archiver: "7z a",
            generators: "Ninja"
          }
        - {
            name: "SUSE Enterprise Linux SP15",
            os: self-hosted,
            artifact: "suse-release",
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
            archiver: ".gz",
            generator: "Ninja"
          }

    steps:
      - uses: actions/checkout@v2

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}

          sudo apt-get install libboost-all-dev
          cd /opt
          wget --no-verbose https://github.com/USCiLab/cereal/archive/v1.3.2.tar.gz
          tar xzf v1.3.2.tar.gz
          mkdir cereal-1.3.2/build
          cd cereal-1.3.2/build
          cmake -DBUILD_SANDBOX=OFF -DBUILD_TESTS=OFF -DWITH_WERROR=OFF ../
          make
          sudo make install
          cd ../../
          rm -r cereal-1.3.2/
          rm v1.3.2.tar.gz

      - name: Install dependencies on Suse
        if: startsWith(matrix.config.name, 'SUSE')
        shell: bash
        #sudo zypper addrepo https://download.opensuse.org/repositories/science/openSUSE_Leap_15.3/science.repo
        #sudo zypper ref
        run: |
          #sudo zypper install -y -t pattern devel_basis
          #sudo zypper install -y wget
          #sudo zypper install -y gzip
          #sudo zypper install -y gcc-c++
          #sudo zypper install -y gcc-fortran
          #sudo zypper install -y ninja
          #sudo zypper install -y git
          #sudo zypper install -y cmake
          #sudo zypper install -y hdf5-devel 
          #sudo zypper install -y cgns-devel
          #sudo zypper install -y cblas
          #sudo zypper install -y libblas3
          #sudo zypper install -y lapack-devel
          #sudo zypper install -y lapacke-devel
          #sudo zypper install -y openmpi4-devel
          #sudo zypper install -y libboost_*
          #sudo zypper install -y libxml2-devel
          #sudo zypper install -y metis-devel
          #apt-get install libhdf5-dev
          ###parametris not found
          #sudo zypper install -y openfoam2106-default
          #mkdir lib
          #cd lib
          #sudo wget https://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-3.17.4.tar.gz
          #sudo tar -xzvf petsc-3.17.4.tar.gz
          #cd petsc-3.17.4
          #./configure  --prefix=/usr/local/petsc --with-cc=/usr/lib64/mpi/gcc/openmpi4/bin/mpicc --with-cxx=/usr/lib64/mpi/gcc/openmpi4/bin/mpicxx --with-fc=/usr/lib64/mpi/gcc/openmpi4/bin/mpif90 --with-debugging=0 COPTFLAGS='-O3 -march=native -mtune=native' CXXOPTFLAGS='-O3 -march=native -mtune=native' FOPTFLAGS='-O3 -march=native -mtune=native' --with-batch
          #make
          ##PETSC_DIR=/lib/petsc-3.17.4 PETSC_ARCH=arch-linux-c-opt install
    
      - name: Configure BITPIT SUSE
        if: startsWith(matrix.config.name, 'SUSE')
        shell: bash
        run: |
          sudo git clone --depth 1 --single-branch --branch mimic-devel https://github.com/optimad/bitpit.git
          cd bitpit
          sudo mkdir build
          cd build
          sudo cmake -DBITPIT_ENABLE_MPI=ON -DBITPIT_VERBOSE_MAKE=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DPETSC_DIR=/lib/petsc-3.17.4 -DPETSC_ARCH=arch-linux-c-opt -DPETSC_CURRENT=ON ../
          make -j8
          make install

      - name: Build Release SUSE
        if: startsWith(matrix.config.name, 'SUSE')
        shell: bash
        run: |
          mkdir instdir
          mkdir build
          cd build
          /bin/bash -c 'export OMPI_MCA_rmaps_base_oversubscribe=1; source /usr/lib/openfoam/openfoam2106/etc/bashrc; cmake -DBUILD_XMLTUI=ON -DBUILD_TESTPLUGIN=ON -DBUILD_EXAMPLES=ON -DBUILD_MIMIC_API_MODE=ON -DBUILD_SHARED_LIBS=ON -DENABLE_MPI=ON -DCMAKE_BUILD_TYPE=Release -DMIMIC_MODULE_IOCGNS=ON -DMIMIC_MODULE_IOCUSTOMDATA=ON -DMIMIC_MODULE_IOOFOAM=ON -DMIMIC_MODULE_NURBS=ON -DMIMIC_MODULE_OBJWAVEFRONT=ON -DMIMIC_MODULE_WRAPPERBLOCKS=ON -DPETSC_DIR=/lib/petsc-3.17.4 -DPETSC_ARCH=arch-linux-c-opt -DPETSC_CURRENT=ON -DCMAKE_INSTALL_PREFIX:PATH=../instdir ../; make -j8; ctest --rerun-failed --output-on-failure;'  
   
      - name: Install Strip
        if: startsWith(matrix.config.name, 'SUSE')
        shell: bash
        run: |
          cd build
          /bin/bash -c 'source /usr/lib/openfoam/openfoam2106/etc/bashrc; cmake --install . --strip;'
          
      - name: Pack SUSE
        if: startsWith(matrix.config.name, 'SUSE')
        shell: bash
        working-directory: instdir
        run: |
          ls -laR
          ${{ matrix.config.archiver }} ../${{ matrix.config.artifact }} .
          
      - name: Upload suse
        uses: actions/upload-artifact@v1
        with:
          path: ./${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}


      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC')
        shell: bash
        run: |
          sudo apt-get update
          sudo apt install build-essential
          sudo apt-get install -y ninja-build
          sudo apt-get install git
          sudo apt-get install cmake
          sudo apt-get install libboost-all-dev
          sudo apt-get install patchelf
          sudo apt update && sudo apt upgrade -y
        
          sudo chmod -R ugo+rwx /usr/local
          
          ninja --version
          cmake --version
          gcc --version

      - name: Build
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC_Release')
        shell: bash
        run: |

          mkdir build
          cd build
          cmake ../
          make
          cpack
          tar -xvzf toyapp.tar.gz
          patchelf --add-needed libmpi.so.12 toyapp/bin/main
          patchelf --add-needed libmetis.so toyapp/bin/main

      - name: Pack
        shell: bash
        run: |
          cd build
          tar -czvf ../${{ matrix.config.artifact }}.tar.gz toyapp

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ./${{ matrix.config.artifact }}.tar.gz
          name: ${{ matrix.config.artifact }}.tar.gz

      - name: Upload release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.config.artifact }}
          asset_name: ${{ matrix.config.artifact }}.zip
          asset_content_type: application/zip